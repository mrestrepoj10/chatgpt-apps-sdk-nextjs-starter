---
globs: **/page.tsx,**/layout.tsx,app/hooks/**
---

# React and UI Patterns

## Component Structure

### Client Components

Components using hooks or browser APIs must be marked with "use client":

```typescript
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";

export default function Component() {
    // Component logic
}
```

### Server Components

Default in Next.js App Router - can be async:

```typescript
export default async function Page() {
    const data = await fetchData(); // Direct async/await
    return <div>{data}</div>;
}
```

## ChatGPT SDK Custom Hooks ([app/hooks/](mdc:app/hooks/))

### Available Hooks

All custom hooks are exported from [app/hooks/index.ts](mdc:app/hooks/index.ts):

1. **useWidgetProps<T>()** - Access tool output and structured content
   ```typescript
   const toolOutput = useWidgetProps<{ name?: string }>();
   const name = toolOutput?.result?.structuredContent?.name;
   ```

2. **useMaxHeight()** - Get maximum height constraint for iframe
   ```typescript
   const maxHeight = useMaxHeight() ?? undefined;
   ```

3. **useDisplayMode()** - Current display mode ("fullscreen" | "widget")
   ```typescript
   const displayMode = useDisplayMode();
   ```

4. **useRequestDisplayMode()** - Request display mode change
   ```typescript
   const requestDisplayMode = useRequestDisplayMode();
   requestDisplayMode("fullscreen");
   ```

5. **useIsChatGptApp()** - Check if running in ChatGPT
   ```typescript
   const isChatGptApp = useIsChatGptApp();
   if (!isChatGptApp) {
       // Show warning or fallback UI
   }
   ```

6. **useOpenExternal()** - Open links in external browser
   ```typescript
   const openExternal = useOpenExternal();
   openExternal("https://example.com");
   ```

7. **useSendMessage()** - Send message to ChatGPT
   ```typescript
   const sendMessage = useSendMessage();
   sendMessage("Hello from widget!");
   ```

8. **useCallTool()** - Call MCP tools programmatically
   ```typescript
   const callTool = useCallTool();
   const result = await callTool("tool_name", { param: "value" });
   ```

### Hook Type Definitions

See [app/hooks/types.ts](mdc:app/hooks/types.ts) for full type definitions and
interfaces.

## Styling with Tailwind CSS

### Dark Mode Support

Use `dark:` prefix for dark mode variants:

```typescript
className = "bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100";
```

### Responsive Design

Use breakpoint prefixes:

```typescript
className = "flex flex-col sm:flex-row gap-4 sm:gap-8";
```

Breakpoints: `sm` (640px), `md` (768px), `lg` (1024px), `xl` (1280px), `2xl`
(1536px)

### Component Classes Pattern

```typescript
className =
    "rounded-lg border border-gray-200 dark:border-gray-800 px-4 py-3 shadow-sm hover:shadow-md transition-shadow";
```

### Modern UI Patterns

- Use `flex` and `grid` for layouts
- Apply `transition-*` for smooth animations
- Use `ring-*` for focus states
- Leverage `gap-*` instead of margin between flex/grid items
- Use semantic colors: `green-*` for success, `blue-*` for info, `red-*` for
  errors

## Client-Side Navigation

### Next.js Router

```typescript
import { useRouter } from "next/navigation";

const router = useRouter();

// Navigate programmatically
router.push("/path");

// Refresh server components
router.refresh();

// Go back
router.back();
```

### Link Component

```typescript
import Link from "next/link";

<Link href="/path" prefetch={false}>
    Text
</Link>;
```

Use `prefetch={false}` to disable automatic prefetching for dynamic content.

## Authentication State in Components

### Client Component Pattern

```typescript
"use client";

import { createClient } from "@/lib/supabase/client";
import { useEffect, useState } from "react";

export default function Component() {
    const [user, setUser] = useState(null);
    const supabase = createClient();

    useEffect(() => {
        const getUser = async () => {
            const { data: { user } } = await supabase.auth.getUser();
            setUser(user);
        };
        getUser();

        // Listen for auth changes
        const { data: { subscription } } = supabase.auth.onAuthStateChange(
            (_event, session) => {
                setUser(session?.user ?? null);
            },
        );

        return () => subscription.unsubscribe();
    }, []);

    // Render based on user state
}
```

### Server Component Pattern

```typescript
import { createServerClient } from "@/lib/supabase/server";

export default async function Page() {
    const supabase = createServerClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
        // Handle unauthenticated state
    }

    return <div>Welcome, {user.email}</div>;
}
```

## Loading and Error States

### Loading State Pattern

```typescript
const [loading, setLoading] = useState(true);
const [error, setError] = useState<string | null>(null);

useEffect(() => {
    fetchData()
        .then((data) => {
            // Handle success
            setLoading(false);
        })
        .catch((err) => {
            setError(err.message);
            setLoading(false);
        });
}, []);

if (loading) return <LoadingSpinner />;
if (error) return <ErrorMessage message={error} />;
```

### Next.js Loading UI

Create `loading.tsx` in app directory for automatic loading states:

```typescript
export default function Loading() {
    return <div>Loading...</div>;
}
```

## Form Handling

### Controlled Components

```typescript
const [formData, setFormData] = useState({ email: "", password: "" });

const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
};

const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    // Handle form submission
};
```

### Form Accessibility

- Use `<label htmlFor="">` with matching input `id`
- Include `aria-label` for icon buttons
- Add `aria-describedby` for error messages
- Use semantic HTML (`<form>`, `<button type="submit">`)

## Image Optimization

### Next.js Image Component

```typescript
import Image from "next/image";

<Image
    src="/logo.svg"
    alt="Logo"
    width={180}
    height={38}
    priority // For above-the-fold images
/>;
```

### External Images

Configure in `next.config.ts`:

```typescript
images: {
  domains: ['example.com'],
}
```

## Performance Optimization

### Memoization

```typescript
import { useCallback, useMemo } from "react";

const memoizedValue = useMemo(() => expensiveComputation(), [deps]);
const memoizedCallback = useCallback(() => handleEvent(), [deps]);
```

### Dynamic Imports

```typescript
import dynamic from "next/dynamic";

const HeavyComponent = dynamic(() => import("./HeavyComponent"), {
    loading: () => <div>Loading...</div>,
    ssr: false, // Disable SSR for client-only components
});
```

## Iframe Considerations

### Height Management

Use `useMaxHeight()` to respect iframe constraints:

```typescript
const maxHeight = useMaxHeight() ?? undefined;

<div style={{ maxHeight, overflow: "auto" }}>
    {/* Content */}
</div>;
```

### External Links

Links are automatically handled by SDK bootstrap in
[app/layout.tsx](mdc:app/layout.tsx). External links open via
`window.openai.openExternal()` when in ChatGPT.

### Fullscreen Toggle

```typescript
const displayMode = useDisplayMode();
const requestDisplayMode = useRequestDisplayMode();

{
    displayMode !== "fullscreen" && (
        <button onClick={() => requestDisplayMode("fullscreen")}>
            Enter Fullscreen
        </button>
    );
}
```

## Accessibility Best Practices

- Use semantic HTML elements
- Include proper ARIA labels and roles
- Ensure keyboard navigation works
- Test with screen readers
- Maintain sufficient color contrast (WCAG AA minimum)
- Add focus indicators for interactive elements
